---
import Input from "../components/Input.astro";
import Layout from "../layouts/Layout.astro";
import CustomTable from "../components/CustomTable.astro";

const herokuUri = import.meta.env.PUBLIC_HEROKU_URI;
const data = await fetch(`${herokuUri}/urls`).then((r) => r.json());
---

<Layout title="url-shortener">
  <main>
    <h1>Welcome to <span class="text-gradient">url-shortener</span></h1>
    <p class="instructions">
      Create a new url in the system.<br />
    </p>
    <Input label="url" type="text" />
    <CustomTable>
      <Fragment slot="header">
        <tr><th>short_url</th><th>long_url</th></tr>
      </Fragment>

      <Fragment slot="body">
        {
          data &&
            data.map((item: any) => (
              <tr>
                <td>{item.short_url}</td>
                <td>{item.long_url}</td>
              </tr>
            ))
        }
      </Fragment>
    </CustomTable>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
</style>
